// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Cliente {
  id           String                 @id @default(auto()) @map("_id") @db.ObjectId
  nome         String
  cpf          String                 @unique
  telefone     String                 @unique
  foto         String?
  auth_token   String?
  expire_date  DateTime?
  pets         Pet[]
  solicitacoes SolicitacaoDeServico[]
  avaliacoes   Avaliacao[]
}

model PrestadorDeServico {
  id              String                 @id @default(auto()) @map("_id") @db.ObjectId
  nome            String
  cpf             String                 @unique
  telefone        String                 @unique
  foto            String?
  descricao       String?
  avaliacao       Float
  auth_token      String?
  expire_date     DateTime?
  Endereco        Endereco[]
  Galeria         Galeria[]
  Disponibilidade Disponibilidade[]
  Servicos        Servico[]
  Avaliacoes      Avaliacao[]
  solicitacoes    SolicitacaoDeServico[]
}

model NumValidation {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  telephone String
  code      String
  userType  String

  @@unique([telephone, userType])
}

model Pet {
  id           String                 @id @default(auto()) @map("_id") @db.ObjectId
  nome         String
  especie      String
  raca         String
  foto         String
  dono_id      String                 @db.ObjectId
  Cliente      Cliente                @relation(fields: [dono_id], references: [id])
  solicitacoes SolicitacaoDeServico[] // Relacionamento com Solicitação
}

model Servico {
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  tipo               String
  preco              Float
  prestador_id       String             @db.ObjectId
  PrestadorDeServico PrestadorDeServico @relation(fields: [prestador_id], references: [id])
}

model SolicitacaoDeServico {
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  cliente_id         String             @db.ObjectId
  Cliente            Cliente            @relation(fields: [cliente_id], references: [id])
  pet_id             String             @db.ObjectId
  Pet                Pet                @relation(fields: [pet_id], references: [id])
  prestador_id       String             @db.ObjectId
  PrestadorDeServico PrestadorDeServico @relation(fields: [prestador_id], references: [id])
  inicio             DateTime
  fim                DateTime
  preco_total        Float
  status             String
}

model Endereco {
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  prestador_id       String             @db.ObjectId
  PrestadorDeServico PrestadorDeServico @relation(fields: [prestador_id], references: [id])
  rua                String
  numero             String
  complemento        String
  bairro             String
  cidade             String
  estado             String
  cep                String
}

model Galeria {
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  prestador_id       String             @db.ObjectId
  PrestadorDeServico PrestadorDeServico @relation(fields: [prestador_id], references: [id])
  imagem             String
  nome               String
  descricao          String
}

model Avaliacao {
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  cliente_id         String             @db.ObjectId
  Cliente            Cliente            @relation(fields: [cliente_id], references: [id])
  prestador_id       String             @db.ObjectId
  PrestadorDeServico PrestadorDeServico @relation(fields: [prestador_id], references: [id])
  rate               Int
  comentario         String
  data               DateTime
}

model Disponibilidade {
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  prestador_id       String             @db.ObjectId
  PrestadorDeServico PrestadorDeServico @relation(fields: [prestador_id], references: [id])
  dia_semana         String
  inicio             DateTime
  fim                DateTime
}
